#!/usr/bin/env python

import pigpio
from control import *

class tx:

   """
   """

   def __init__(self, pi, gpio, carrier_hz):

      """
      Initialises an IR tx on a Pi's gpio with a carrier of
      carrier_hz.

      http://www.hifi-remote.com/infrared/IR-PWM.shtml
      """

      self.pi = pi
      self.gpio = gpio
      self.carrier_hz = carrier_hz
      self.micros = 1000000 / carrier_hz
      self.on_mics = self.micros / 2
      self.off_mics = self.micros - self.on_mics
      self.offset = 0

      self.wf = []
      self.wid = -1

      pi.set_mode(gpio, pigpio.OUTPUT)

   def clear_code(self):
      self.wf = []
      if self.wid >= 0:
         self.pi.wave_delete(self.wid)
         self.wid = -1

   def construct_code(self):
      if len(self.wf) > 0:
         pulses = self.pi.wave_add_generic(self.wf)
         print("waveform TOTAL {} pulses".format(pulses))
         self.wid = self.pi.wave_create()

   def send_code(self):
      if self.wid >= 0:
         self.pi.wave_send_once(self.wid)
         while self.pi.wave_tx_busy():
            pass

   def go(self):
      self.construct_code()
      self.send_code()
      self.clear_code()

   def add_to_code(self, on, off):

      # is there room for more pulses?

      if (on*2) + 1 + len(self.wf) > 680: # 682 is maximum
         
         pulses = self.pi.wave_add_generic(self.wf)
         print("waveform partial {} pulses".format(pulses))
         self.offset = self.pi.wave_get_micros()

         # continue pulses from offset
         self.wf = [pigpio.pulse(0, 0, self.offset)]

      # add on cycles of carrier
      for x in range(on):
         self.wf.append(pigpio.pulse(1<<self.gpio, 0, self.on_mics))
         self.wf.append(pigpio.pulse(0, 1<<self.gpio, self.off_mics))

      # add off cycles of no carrier
      self.wf.append(pigpio.pulse(0, 0, off * self.micros))

sequence1 = \
[1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0, \
0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1,1,0,1, \
1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0, \
1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0, \
0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1]

sequence2 = [\
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1]



sequence3 = [ \
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0, \
0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0, \
1,0,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0, \
0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1, \
\
1,0,1,0,1,0,0,0,0,1,0,1,0,1,1,1, \
0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1, \
1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1]

recorded = [\
0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0]

email_code2 = [ \
128,61,18,45,17,15,17,16,17,17,15,18,15,18,15,18,15,18,15,18,15,18,15,18,15,18,15,47,15,18,15,18,15,18,15,18,15,18,16,19,14,19,14,18,15,19,14,19,14,20,14,19,14,19,14,19,14,19,14,19,14,19,14,49,14,19,14,47,15,48,15,52,11,46,15,48,15,46,16,17,19,44,16,49,13,46,16,47,15,47,16,46,17,46,16,47,16,47,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,18,15,47,16,46,16,17,16,17,16,46,16,46,16,46,16,47,16,17,18,18,13,47,16,47,16,17,16,17,16,17,16,17,16,17,16,47,16,46,16,17,16,17,16,47,16,47,16,46,17,45,16,17,16,18,15,47,16,46,16,18,16,47,16,46,16,17,17,16,16,46,16,17,16,17,17,17,17,18,15,17,16,46,16,46,16,18,16,46,16,47,16,46,17,16,17,16,16,46,16,17,18,15,16,17,16,46,16,17,17,46,16,46,16,17,16,46,16,46,16,46,16,17,19,44,15,17,16,17,16,17,23,10,16,17,16,17,16,18,15,18,16,46,16,49,14,47,15,47,16,46,16,47,17,49,13,46,16,17,16,21,12,17,16,17,16,17,17,16,16,17,16,17,17,45,16,47,15,46,16,47,16,47,15,47,16,46,16,48,15,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,46,16,50,12,50,13,49,13,46,16,47,15,46,16,47,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,18,48,13,46,16,46,16,47,16,46,15,46,16,46,16,47,16,17,16,17,16,17,16,17,16,20,14,20,13,17,17,17,16,46,16,47,16,46,16,47,16,47,15,46,16,46,16,46,16,17,16,46,16,47,16,18,16,47,15,17,17,16,16,18,16,46,16,17,16,17,16,47,16,17,16,46,16,47,16,46,16,50,12,18,15,17,16,17,16,47,15,49,13,47,16,47,16,17,16,46,18,45,16,47,16,17,16,18,16,17,16,17,16,17,16,17,16,17,16,19,15,17,17,16,16,17,16,17,16,49,13,48,15,47,16,48,14,46,16,46,16,50,12,46,16,20,13,17,17,17,16,17,18,15,17,16,16,17,16,17,16,46,16,46,16,46,16,46,16,46,16,46,16,46,17,46,16,18,16,16,18,15,16,17,16,17,16,17,16,17,16,17,16,47,16,47,15,47,15,46,16,46,16,46,16,48,14,50,12,46,16,47,18,15,16,17,16,17,16,17,19,17,14,17,16,17,16,17,16,47,16,47,16,46,16,46,16,46,16,46,16,114 ]


if __name__ == "__main__":

   import time
   import pigpio
   import ir_tx

   pi = pigpio.pi()

   tx = ir_tx.tx(pi, 25, 38000)

   tx.clear_code()

#  sequence1 code
   if False:
      tx.add_to_code(350, 170)
      tx.go()
      for bit in sequence1:
         if bit == 1:
            tx.add_to_code(62, 22)
         else:
            tx.add_to_code(23, 22)


#  recorder code
   if True:
      tx.add_to_code(128, 61)

      for bit in build_command(17, MODE_HEAT, FAN_0, POWER_ON):
         if bit == '1':
            tx.add_to_code(16, 18) # 17,15
         else:
            tx.add_to_code(16, 47) # 17,45


#  email code
   if False:
      for x in range(len(email_code2) - 1):
         if x%2 == 0:
            tx.add_to_code(email_code2[x],email_code2[x+1])


   tx.go()

   pi.stop()
